{"version":3,"sources":["../../../../assets/Script/assets/Script/game-manager.js"],"names":["GameManager","cc","Class","properties","rowCount","columnCount","space","cubes","cubeTemplate","Node","cubePrefabs","gameNode_","halfWidth","halfHeight","init","prefabs","find","director","getRunningScene","width","height","instantiate","initCubes","log","randColorCube","max","Blue","color","Math","floor","random","i","push","tmp","j","cube","error","x","y","parent","posToPoint","pos","cell","row","column","warn","position","getLimitPosition","touchPos","node","point","p","length","update","dt","window","gameManager"],"mappings":"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","file":"game-manager.js","sourceRoot":"../../../../assets/Script","sourcesContent":["// Learn cc.Class:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/class.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/class.html\n// Learn Attribute:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/life-cycle-callbacks.html\nimport {CubeState,CubeColors} from \"consts\";\nvar GameManager=cc.Class({\n\n  properties: {\n    rowCount: 8,\n    columnCount: 7,\n    space: 20,\n\n    cubes: [],\n    cubeTemplate:cc.Node,\n    cubePrefabs:[],\n    gameNode_: null,\n\n    halfWidth:0,\n    halfHeight:0,\n  },\n\n  init(prefabs) {\n    this.gameNode_ = cc.find(\"/Canvas/game-node\", cc.director.getRunningScene());\n    this.cubePrefabs=prefabs;\n\n    this.halfWidth=this.gameNode_.width/2;\n    this.halfHeight=this.gameNode_.height/2;\n\n    this.cubeTemplate=cc.instantiate(this.cubePrefabs[0]);\n\n    this.initCubes();\n    cc.log(\"game manager init\");\n  },\n\n  randColorCube(){\n    let max=CubeColors.Blue+1;\n    let color=Math.floor(Math.random()*10)%max;\n    return cc.instantiate(this.cubePrefabs[color]);\n  },\n\n  initCubes() {\n    this.cubes=[];\n    for (let i=0;i<this.rowCount;i++){\n      this.cubes.push([]);\n      let tmp=[]\n      for (let j=0;j<this.columnCount;j++){\n        tmp.push(null);\n      }\n      this.cubes.push(tmp);\n    }\n    for (let i = 0; i < 3; i++) {\n      for (let j = 0; j < this.columnCount; j ++) {\n        let cube=this.randColorCube();\n        if (!cube){\n          cc.error(\"init cube fail\");\n          return;\n        }\n        // cube.getComponent(\"cube\").init();\n        cube.x=this.space+cube.width/2+(cube.width+this.space)*j;\n        cube.y=this.space+cube.height/2+(cube.height+this.space)*i;\n        cube.parent=this.gameNode_;\n\n        this.cubes[i][j]=cube;\n      }\n    }\n  },\n\n  posToPoint(pos){\n    let cell={row:0,column:0};\n    for (let i=0;i<this.rowCount;i++){\n      if (pos.y > (i+1) * (this.cubeTemplate.height+this.space)){\n        continue;\n      }\n      cell.row=i;\n      for (let j=0;j<this.columnCount;j++){\n        if (pos.x<(j+1) * (this.cubeTemplate.width+this.space)){\n          cell.column=j;\n          return cell;\n        }\n      }\n    }\n\n    cc.warn(\"invalid touch position\");\n    return position;\n  },\n\n  //dir:-1 or 1\n  getLimitPosition(touchPos,node){\n    let position=this.posToPoint(touchPos);\n\n    let point=cc.p(0,0);\n\n    if (!position.row>=this.cubes.length){\n      cc.error(\"invalid row count\");\n      return;\n    }\n    for (let i=0;i<=position.column;i++){\n      let cube=this.cubes[position.row][i];\n      if (!cube){\n        continue;\n      }\n      if (node === cube) {\n        continue;\n      }\n      if (touchPos.x-node.x > 0){\n        point.x=cube.x-this.space-cube.width;\n        break;\n      }else{\n        point.x=cube.x+this.space+cube.width;\n        break;\n      }\n    }\n\n    for (let i=0;i<=position.row;i++){\n      let cube=this.cubes[i][position.column];\n      if (!cube){\n        continue;\n      }\n      if (node === cube) {\n        continue;\n      }\n      if (touchPos.y-node.y > 0){\n        point.y=cube.y-this.space-cube.height;\n        break;\n      }else{\n        point.y=cube.y+this.space+cube.height;\n        break;\n      }\n    }\n\n    return point;\n  },\n\n  update (dt) {\n    \n  },\n});\n\nwindow.gameManager=new GameManager();\n"]}